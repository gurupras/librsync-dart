import 'dart:math';

import 'package:librsync/delta.dart';
import 'package:librsync/src/reader_writer.dart';
import 'package:test/test.dart';

import 'bytes_stream_consumer.dart';
import 'signature_test.dart';

void main() {
  group('Delta', () {
    // Simple test for Delta generation: just checks if it runs without error.
    //
    // It is not worthwhile to compare our deltas with the deltas generated by the
    // original rdiff from the C librsync: the exact delta will depend on internal
    // factors like the size of the buffers used.
    //
    // We do however, make sure that we can apply the deltas generated by the
    // original rdiff and that our combination of delta and patch produce the
    // expected results. This is done in the Patch tests.
    test('Smoke', () async {
      final totalBytes = 1000000;

      var srcBuf = generateRandomBytes(totalBytes);
      var srcStream = Stream.fromIterable([srcBuf]);
      final sig = await testCreateSignature(srcStream);

      // create 10% of difference by appending new random data
      final newBytes = totalBytes ~/ 10;
      srcBuf = srcBuf.sublist(0, totalBytes - newBytes);
      srcBuf.addAll(generateRandomBytes(newBytes));
      srcStream = Stream.fromIterable([srcBuf]);

      final output = BytesStreamConsumer();
      await delta(sig, StreamReader(srcStream), output);
    });
  });
}

List<int> generateRandomBytes(int n) {
  final random = Random.secure();
  List<int> bytes = List<int>.generate(n, (index) => random.nextInt(256));
  return bytes;
}
